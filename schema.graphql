

type AuthPayload {
  token: String
  usuario: Usuario
}

type Cliente {
  id: String
  medicamentos: String
  nivel: Int
}

type Comentario_Post {
  coteudo: String
  id: String
  nota: Int
}

type Mutation {
  CadastroUsuario(SobreNome: String, cidade: String, cliente: clienteCreateInput, email: String!, genero: String, id: String, idade: String, imgem_perfil: imgemPerfil, name: String, profissional: profissionalCreateInput, senha: String!, telefone: String): AuthPayload!
  login(email: String!, senha: String!): AuthPayload
}

type Notificacao_Comentario {
  comentario: String
  id: String
  imgem_perfil: String
}

type Profissional {
  ambiente: String
  especial: String
  especialidade: String
  grupo: Int
  id: String
  idade: Int
  imagens: String
  localatendimento: String
  qualificacao: String
  raio: Int
}

input ProfissionalWhereUniqueInput {
  ambiente: String
  especial: String
  especialidade: String
  grupo: Int
  id: Int
  idade: Int
  imagens: String
  localatendimento: String
  qualificacao: String
  raio: Int
}

type Query {
  TodosUsuario: [Usuario]
  perfil: Usuario
}

type Usuario {
  Profissionais: [Profissional]
  SobreNome: String
  cidade: String
  clientes: [Cliente]
  email: String
  genero: String
  id: String
  idade: String
  imgem_perfis: [imagem_perfil]
  name: String
  senha: String
  telefone: String
}

input UsuarioCreateInput {
  email: String
  relacionamentosUsuariom: [profissionalCreateInput]
  senha: String
}

input clienteCreateInput {
  id: String!
  medicamentos: String
  nivel: Int
}

type imagem_perfil {
  id: String
  imagen: String
}

input imgemPerfil {
  id: String
  imagen: String
}

input profissionalCreateInput {
  UsuarioId: Int
  ambiente: String
  especial: String
  especialidade: String
  grupo: Int
  id: String
  idade: String
  imagens: String
  localatendimento: String
  qualificacao: String
  raio: Int
}